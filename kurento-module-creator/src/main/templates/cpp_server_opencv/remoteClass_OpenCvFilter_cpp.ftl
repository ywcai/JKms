<#if (remoteClass.extends??) && (remoteClass.extends.type.name?ends_with("OpenCVFilter"))>
${remoteClass.name}OpenCVImpl.cpp
/* Autogenerated with kurento-module-creator */

#include "${remoteClass.name}OpenCVImpl.hpp"
#include <KurentoException.hpp>

<#list module.code.implementation["cppNamespace"]?split("::") as namespace>
namespace ${namespace}
{
</#list>

${remoteClass.name}OpenCVImpl::${remoteClass.name}OpenCVImpl ()
{
}

/*
 * This function will be called with each new frame. mat variable
 * contains the current frame. You should insert your image processing code
 * here. Any changes in mat, will be sent through the Media Pipeline.
 */
void ${remoteClass.name}OpenCVImpl::process (cv::Mat &mat)
{
  // FIXME: Implement this
  throw KurentoException (NOT_IMPLEMENTED, "${remoteClass.name}OpenCVImpl::process: Not implemented");
}

<#list remoteClass.properties as property>

${getCppObjectType (property.type, false)} ${remoteClass.name}OpenCVImpl::get${property.name?cap_first} ()
{
  // FIXME: Implement this
  throw KurentoException (NOT_IMPLEMENTED, "${remoteClass.name}OpenCVImpl::get${property.name}: Not implemented");
}
<#if !property.final && !property.readOnly>

void ${remoteClass.name}OpenCVImpl::set${property.name?cap_first} (${getCppObjectType (property.type, true)}${property.name})
{
  // FIXME: Implement this
  throw KurentoException (NOT_IMPLEMENTED, "${remoteClass.name}OpenCVImpl::set${property.name}: Not implemented");
}
</#if>
</#list>

<#macro methodStub method>

${getCppObjectType(method.return,false)} ${remoteClass.name}OpenCVImpl::${method.name} (<#rt>
    <#lt><#list method.params as param>${getCppObjectType(param.type)}${param.name}<#if param_has_next>, </#if></#list>)
{
  // FIXME: Implement this
  throw KurentoException (NOT_IMPLEMENTED, "${remoteClass.name}OpenCVImpl::${method.name}: Not implemented");
}
</#macro>
<#list remoteClass.methods as method><#rt>
  <#list method.expandIfOpsParams() as expandedMethod ><#rt>
    <#lt><@methodStub expandedMethod />
  </#list>
  <#lt><@methodStub method />
</#list>

<#list module.code.implementation["cppNamespace"]?split("::")?reverse as namespace>
} /* ${namespace} */
</#list>
</#if>